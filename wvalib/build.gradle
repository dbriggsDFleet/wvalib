import groovy.io.FileType
buildscript {
    dependencies {
        classpath 'org.apache.maven.wagon:wagon-http:2.2'

    }
    // Based on https://github.com/Netflix/gradle-template build.gradle
    apply from: file('../gradle/buildscript.gradle'), to: buildscript
}
apply plugin: 'com.android.library'
apply plugin: 'maven'


// High-level project settings
project.ext {
    /*
        Builds are snapshot versions, unless the property 'release' is set.
        For example:
            $ ./gradlew -P release :wvalib:clean :wvalib:uploadArchives
    */
    isRelease = project.hasProperty("release")

    versionSuffix = isRelease ? "" : "-DigitalFleet"

    maven = [
            repo    : isRelease ? mavenReleases : mavenSnapshots,
            username: isRelease ? mavenReleasesUsername : mavenSnapshotsUsername,
            password: isRelease ? mavenReleasesPassword : mavenSnapshotsPassword
    ]
}
// First version number is the wvalib version - df - second version number is the digitalfleet version.
version '2.2.0-df-1.0.4' + versionSuffix
group 'com.digi.wva'
dependencies {
    //compile fileTree(include: '*.jar', dir: 'libs')
//    compile ('com.android.support:appcompat-v7:25.0.0')
    compile 'com.squareup.okhttp:okhttp:2.7.5'
    compile 'com.squareup.okio:okio:1.11.0'
    compile ('com.google.dexmaker:dexmaker:1.2')
    compile 'joda-time:joda-time:2.2'
    compile 'com.android.support:multidex:1.0.1'
    // Testing dependencies
    androidTestCompile ('com.squareup.okhttp:mockwebserver:2.7.5')
            {
                exclude group: 'org.hamcrest'
                //exclude group: 'org.mockito'
            }
    androidTestCompile ('org.mockito:mockito-all:1.9.5') {
        exclude module: 'objenesis'
        exclude group: 'org.hamcrest'
    }
    androidTestCompile ('com.google.dexmaker:dexmaker-mockito:1.2')
            {
                exclude module: 'objenesis'
                exclude group: 'org.hamcrest'
                exclude group: 'org.mockito'
            }
}
android {
    compileSdkVersion 25
    buildToolsVersion '25.0.0'

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 25

        testApplicationId "com.digi.wva.test"
        testInstrumentationRunner "com.digi.wva.WVATestRunner"
        testHandleProfiling true
        testFunctionalTest true
        // Enabling multidex support.
        multiDexEnabled true
    }
    // Don't publish the AAR file for this library. (The JAR is sufficient.)
    // TODO: Setting this to null causes an NPE in the Android library plugin 2.0.0.
    // defaultPublishConfig null
    buildTypes.debug {
        testCoverageEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
    }

    libraryVariants.all { variant ->
        // Don't create generateDebugDocs tasks
        if (variant.buildType.name == "debug")
            return;

        String variantName = variant.name.capitalize()
        String taskName = "generate${variantName}Docs"
        String jarTask = "${taskName}Jar"

        def doclinks = [
                "http://docs.oracle.com/javase/7/docs/api/", // Java APIs,
                "http://square.github.io/okhttp/2.x/okhttp/",   // OkHttp docs,
                "http://stleary.github.io/JSON-java/", // org.json docs
                "http://joda-time.sourceforge.net/apidocs/"  // JodaTime docs
        ];

        task(taskName, type: Javadoc) {
            description "Generate Javadoc for $variant.name"
            source = fileTree('src/main/java').matching {
                include '**/*.java'
                // Exclude the com.digi.wva.internal package from the Javadocs.
                exclude 'com/digi/wva/internal'
            }
            ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"

            // src/main/java needs to be on the classpath because the internal subpackage is needed
            // for doc compilation, even though it is excluded from the source option
            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar) + files('src/main/java')

            options.header "<strong>Digi WVA Android Library<br>version ${version}</strong>"

            options.windowTitle "Digi WVA Android Library (wvalib) v${version} API Docs"
            title = options.windowTitle

            options.overview = new File("${project.projectDir}/src/main/java/overview.html")

            options.links(*doclinks);
            options.linksOffline("http://d.android.com/reference/",
                    "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar");

            exclude '**/BuildConfig.java'
            exclude '**/R.java'

            options.use true

            // JDK 8 Javadoc is very strict, and our docs are not formatted the greatest.
            // Disable doclint for now.
            options.addStringOption('Xdoclint:none', '-quiet')

            doLast {
                // Make all the external Javadoc references open in new windows.
                // http://stackoverflow.com/a/3954639 (recursively finding files)
                // http://blog.davidehringer.com/groovy/processing-files-place-groovy/

                destinationDir.eachFileRecurse(FileType.FILES) { file ->
                    if (file.name.endsWith(".html")) { // Only edit html files
                        def text = file.text
                        file.write(text.replaceAll("href=\"(.+)is-external=true\"") {
                            Object[] match -> "href=\"${match[1]}is-external=true\" target=\"_blank\""
                        })
                    }
                }
            }
        }
        /**
        task listJars {
            doLast {
                configurations.compile.each { File file -> println file.name }
            }
        }
        **/
        task list(dependsOn: configurations.compile) {
            doLast {
                println "classpath = ${configurations.compile.collect { File file -> file.name }}"
                //classpath += ${configurations.compile.collect { File file -> file.name }}
            }
        }

        task(jarTask, type: Jar, dependsOn: "${taskName}") {
            classifier = 'javadoc'
            from tasks."${taskName}".destinationDir
            manifest {
                attributes(
                        "Manifest-Version": "1.0",
                        "Class-Path": configurations.compile.collect { it.getName() }.join(' ')
                )
            }
            artifacts {
                // Add the Javadocs to the artifacts list.
                archives tasks."${jarTask}"
            }
        }

        task("generate${variantName}SourcesJar", type: Jar, dependsOn: variant.javaCompile) {
            classifier = 'sources'
            from variant.javaCompile.source
            manifest {
                attributes(
                        "Manifest-Version": "1.0",
                        "Class-Path": configurations.compile.collect { it.getName() }.join(' ')
                )
            }
            artifacts {
                archives tasks."generate${variantName}SourcesJar"
            }
        }

        task("generate${variantName}Jar", type: Jar, dependsOn: variant.javaCompile) {
            from variant.javaCompile.destinationDir
            manifest {
                attributes(
                        "Manifest-Version": "1.0",
                        'Implementation-Title': 'wvalib',
                        "Class-Path": configurations.compile.collect { it.getName() }.join(' ')
                )
            }
            artifacts {
                archives tasks."generate${variantName}Jar"
            }
        }
    }
}
/** Eclipse is not longer supported by Android as a development platform
task makeEclipseProject(type: Copy) {
    destinationDir = new File("$project.buildDir/outputs/eclipse-project")

    doFirst {
        destinationDir.mkdirs()
    }

    from('src/main') {
        include 'AndroidManifest.xml'
    }
    from(project.projectDir) {
        include 'lint.xml'
        include 'proguard-project.txt'
        include 'project.properties'
    }
    // Copy static pre-generated files
    from '../gradle/assets/eclipse-project'

    into("src") {
        from 'src/main/java'
    }

    into("libs") {
        from 'libs'
    }
}
 **/
uploadArchives {
    repositories {
        mavenDeployer {
            // Edit gradle.properties to specify the repository and
            // authentication for the releases and snapshots repositories.
            //
            // Specify the 'release' property either in gradle.properties or on
            // the command-line (gradle -P release :wvalib:clean :wvalib:uploadArchives) to
            // upload to the releases repository - otherwise, the snapshots
            // repository will be used.
            repository(url: project.maven.repo) {
                authentication(userName: project.maven.username, password: project.maven.password)
            }

            pom.project {
                name 'WVA Android Library'
                artifactId 'wvalib'
                packaging 'jar'
                organization {
                    name 'Digi International, Inc.'
                    url 'http://www.digi.com'
                }
                licenses {
                    license {
                        name "Mozilla Public License 2.0"
                        url 'http://mozilla.org/MPL/2.0'
                        distribution 'repo'
                    }
                }
            }
        }
    }
}
